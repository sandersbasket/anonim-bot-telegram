const TelegramBot = require('node-telegram-bot-api');
const sqlite3 = require('sqlite3').verbose();
let jsonData = require('./config.json');

const token = jsonData.bot_token;

const bot = new TelegramBot(token, {polling: true});


let db = new sqlite3.Database('./users.db', sqlite3.OPEN_READWRITE, (err) => {
    if (err) {
        console.error(err.message);
    }
    console.log('Connected to the database.');
});


let keyboards = {
    auth: {
        inline_keyboard: [
            [
                {
                    text: "–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å",
                    callback_data: "create_profile"
                },
                {
                    text: "–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è", 
                    callback_data: "auth_profile"
                }
            ], 
            [
                {
                    text: '–ü–æ–º–æ—â—å',
                    callback_data: 'help'
                }
            ]
        ]
    }, 
    profile: {
        inline_keyboard: [
            [
                {
                    text: '–ü—Ä–æ—Ñ–∏–ª—å', 
                    callback_data: 'profile'
                }, 
                {
                    text: '–ú–æ–∏ —á–∞—Ç—ã', 
                    callback_data: 'chats'
                }
            ], 
            [
                {
                    text: '–í—Å—Ç—É–ø–∏—Ç—å –≤ –¥–∏–∞–ª–æ–≥', 
                    callback_data: 'enter_chat'
                }
            ]
        ]
    }, 
    back_menu: {
        inline_keyboard: [
            [
                {
                    text: '–ù–∞–∑–∞–¥', 
                    callback_data: 'back_menu'
                }
            ]
        ]
    }
}

function addUser(user_id) {    
    db.run("insert into user_info (telegram_id, username, password, media_status, link_status, last_activity, count_messages, mute_status) values (" + user_id + ", 'None', 'None', '–ó–∞–ø—Ä–µ—â–µ–Ω–æ', '–ó–∞–ø—Ä–µ—â–µ–Ω–æ', 'None', 0, '–ù–µ –∑–∞–º—É—á–µ–Ω')");
}


function updatelevel(user_id, level, array) {
    for (let i = 0; i < array.length; i++) {
        let index = array[i].indexOf(user_id)
        if (index !== -1) {
            array.splice(index, 1)
            array.push([user_id, level])
        }
    }
}

function deleteLevel(user_id, array) {
    for (let i = 0; i < array.length; i++) {
        let index = array[i].indexOf(user_id)
        if (index !== -1) {
            array.splice(index, 1)
        }
    }
}

function isUserExits(user_id, id) {
    let sql = "SELECT * from user_info where telegram_id = '" + user_id + "'";
    db.get(sql, (err, rows) => {
        if (rows === null || rows === undefined){
            addUser(user_id)
            bot.sendMessage(id, 'ü§ñ–î–ª—è –æ–±—â–µ–Ω–∏—è –Ω—É–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞', {reply_markup: keyboards.auth});
        } else if (rows != null && err === null) {
            let sql = "SELECT * from user_info where telegram_id = '" + user_id + "'";
            db.get(sql, (err, rows) => {
                if (rows.username == 'None' && rows.password == 'None') {
                    bot.sendMessage(id, '–ü–∞—Ä–æ–ª—å –∏ –ª–æ–≥–∏–Ω –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω', {reply_markup: keyboards.auth})
                } else if (rows.username == 'None') {
                    bot.sendMessage(id, '–õ–æ–≥–∏–Ω –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, /setlogin [username]')
                } else if (rows.password == 'None') {
                    bot.sendMessage(id, '–ü–∞—Ä–æ–ª—å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\n–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å –∫–æ–º–∞–Ω–¥–æ–π /password (password), —Å–º–µ–Ω–∏—Ç—å - /changepassowrd (Last password) (New Password)')
                } else if (rows.password !== 'None' && rows.username !== 'None') {
                    bot.sendMessage(id, '–ü—Ä–∏–≤–µ—Ç', {reply_markup: keyboards.profile})
                }
            })
        }
    });
}


let registerlevel = []

bot.on('message', async (msg) => {
    console.log(msg)
    let id = msg.from.id
    if (msg.text) {
        if (msg.text == '/start') {
            isUserExits(id, id)
        }
        let object_register = Object.fromEntries(registerlevel)
        if (object_register[id] == 1) {
            if (msg.text.length > 3) {
                let sql = "SELECT * from user_info where username = '" + msg.text + "'";
                db.get(sql, (err, rows) => {
                    if (rows == null && err == null) {
                        db.run('update user_info set username = "' + msg.text + '" where telegram_id = "' + id + '"')
                        bot.sendMessage(id, '–•–æ—Ä–æ—à–æ, –ø—Ä–∏–¥—É–º–∞–π—Ç–µ –ø–∞—Ä–æ–ª—å, —Ç–∞–∫ –∂–µ –Ω–µ –º–µ–Ω–µ–µ 3-–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤!')
                        updatelevel(id, '2', registerlevel)
                    } else {
                        bot.sendMessage(id, '–î–∞–Ω–Ω—ã–π –ª–æ–≥–∏–Ω —É–∂–µ –∑–∞–Ω—è—Ç! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–∏–¥—É–º–∞—Ç—å –¥—Ä—É–≥–æ–π')
                        deleteLevel(id, registerlevel)
                        updatelevel(id, '1', registerlevel)
                    }
                })
            } else {
                bot.sendMessage(id, '–ú–µ–Ω—å—à–µ 3-–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!')
                deleteLevel(id, registerlevel)
                updatelevel(id, '1', registerlevel)
            }
        }
        if (object_register[id] == 2) {
            if (msg.text.length > 3) {
                db.run('update user_info set password = "' + msg.text + '" where telegram_id = "' + id + '"')
                deleteLevel(id, registerlevel)
                bot.sendMessage(id, '–¢—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è!', {reply_markup: keyboards.profile})
            } else {
                bot.sendMessage(id, '–ú–µ–Ω—å—à–µ 3-–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!')
                deleteLevel(id, registerlevel)
                updatelevel(id, '2', registerlevel)
            }
        }
        if (msg.text.length > 1) {
            db.run('update user_info set last_activity = Date("now") where telegram_id = "' + id + '"')
            let sql = "SELECT * from user_info where telegram_id = '" + id + "'";
            db.get(sql, (err, rows) => {
                if (rows == null && err == null) {
                    bot.sendMessage(id, '–û—à–∏–±–∫–∞, –Ω–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –ø—Ä–æ—Ñ–∏–ª—å!')
                } else {
                    db.run('update user_info set count_messages = ' + (rows.count_messages + 1)  + ' where telegram_id = "' + id + '"')
                }
            })
        }
    }
});
  
bot.on("polling_error", console.log);
  
bot.on('callback_query', (query) => { 
    let id = query.message.chat.id;
    console.log(query)
    switch (query.data) 
    {
        case 'create_profile':
            bot.sendMessage(id, '–•–æ—Ä–æ—à–æ, –ø—Ä–∏–¥—É–º–∞–π –ª–æ–≥–∏–Ω –∏ –Ω–∞–ø–∏—à–∏ –µ–≥–æ –º–Ω–µ, –Ω–µ –º–µ–Ω–µ–µ 3-–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤!')
            registerlevel.push([id, '1'])
            break
        case 'profile':
            let sql = "SELECT * from user_info where telegram_id = '" + id + "'";
            db.get(sql, (err, rows) => {
                if (rows == null && err == null) {
                    bot.sendMessage(id, '–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!')
                } else {
                    bot.sendMessage(id, 'Profile [' + rows.username + ']\n–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: ' + rows.count_messages + '\n–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ' + rows.last_activity + '\n–°—Ç–∞—Ç—É—Å –º—É—Ç–∞: ' + rows.mute_status, {reply_markup: keyboards.back_menu})    
                }
            })
            break
        case 'back_menu': 
            bot.sendMessage(id, 'Menu:', {reply_markup: keyboards.profile})
            break
    } 
})